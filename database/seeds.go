package database

import (
	"server/models"

	"gorm.io/gorm"
)

type Seeder interface {
	Seed(db *gorm.DB) error
	Clear(db *gorm.DB) error
}

// Tool

type ToolSeeder struct{}

func (s ToolSeeder) Seed(db *gorm.DB) error {
	tools := []models.Tool{
		{
			Title:       "Value Sensitive Design",
			Description: "A method for integrating stakeholder values into the design process.",
			URL:         "https://vsdesign.org/",
			Cover:       "",
			Tags:        "Values,Stakeholders",
			Type:        "Method",
		},
		{
			Title:       "Problem Framing Canvas",
			Description: "A visual tool to help teams critically reflect on how a problem is framed.",
			URL:         "https://realkm.com/wp-content/uploads/2023/05/Problem-Framing-Canvas-Handbook.pdf",
			Cover:       "",
			Tags:        "Problem,Framing",
			Type:        "Mapping, Tool, Canvas",
		},
		{
			Title:       "Stakeholder Mapping Tool",
			Description: "Tool for identifying and analyzing stakeholder relationships.",
			URL:         "https://www.stakeholdermap.com/",
			Cover:       "",
			Tags:        "Stakeholders",
			Type:        "Mapping, Tool",
		},
		{
			Title:       "UNESCO Ethics of AI Recommendation",
			Description: "Normative framework providing ethical guidelines for AI development and use.",
			URL:         "https://unesdoc.unesco.org/ark:/48223/pf0000381137",
			Cover:       "",
			Tags:        "Ethics",
			Type:        "Guidelines, Framework",
		},
		{
			Title:       "Data Ethics Canvas",
			Description: "Canvas for identifying and addressing ethical issues in data projects.",
			URL:         "https://theodi.org/article/data-ethics-canvas/",
			Cover:       "",
			Tags:        "Ethics",
			Type:        "Mapping, Canvas",
		},
	}
	return db.Create(&tools).Error
}

func (s ToolSeeder) Clear(db *gorm.DB) error {
	return db.Exec("DELETE FROM tools").Error
}

// Questionnaire

type QuestionnaireSeeder struct{}

func (s QuestionnaireSeeder) Seed(db *gorm.DB) error {
	questionnaires := []models.Questionnaire{
		{
			Name:        "Problem Definition/ Project Scoping",
			Description: "As data science continues to shape the world around us, from healthcare and education to urban planning and policymaking, there is a growing need to ensure that the work we do is not only technically sound, but also ethically responsible, legally compliant, and socially aware.",
			Form: `{
					"@id": "https://repo.metadatacenter.org/templates/1ec51eb6-d07c-4f25-8299-1972b55b42b7",
					"@type": "https://schema.metadatacenter.org/core/Template",
					"@context": {
						"xsd": "http://www.w3.org/2001/XMLSchema#",
						"pav": "http://purl.org/pav/",
						"bibo": "http://purl.org/ontology/bibo/",
						"oslc": "http://open-services.net/ns/core#",
						"schema": "http://schema.org/",
						"schema:name": {
						"@type": "xsd:string"
						},
						"schema:description": {
						"@type": "xsd:string"
						},
						"pav:createdOn": {
						"@type": "xsd:dateTime"
						},
						"pav:createdBy": {
						"@type": "@id"
						},
						"pav:lastUpdatedOn": {
						"@type": "xsd:dateTime"
						},
						"oslc:modifiedBy": {
						"@type": "@id"
						}
					},
					"type": "object",
					"title": "Boolean template schema",
					"description": "Boolean template schema generated by the CEDAR Template Editor 2.7.1",
					"_ui": {
						"order": [
						"problem_definition",
						"benefit_harm",
						"alternative_framing",
						"consult_stakeholders"
						],
						"propertyLabels": {
						"problem_definition": "problem_definition",
						"benefit_harm": "benefit_harm",
						"alternative_framing": "alternative_framing",
						"consult_stakeholders": "consult_stakeholders"
						},
						"propertyDescriptions": {
						"problem_definition": "",
						"benefit_harm": "",
						"alternative_framing": "Help Text",
						"consult_stakeholders": ""
						}
					},
					"properties": {
						"@context": {
						"type": "object",
						"properties": {
							"rdfs": {
							"type": "string",
							"format": "uri",
							"enum": [
								"http://www.w3.org/2000/01/rdf-schema#"
							]
							},
							"xsd": {
							"type": "string",
							"format": "uri",
							"enum": [
								"http://www.w3.org/2001/XMLSchema#"
							]
							},
							"pav": {
							"type": "string",
							"format": "uri",
							"enum": [
								"http://purl.org/pav/"
							]
							},
							"schema": {
							"type": "string",
							"format": "uri",
							"enum": [
								"http://schema.org/"
							]
							},
							"oslc": {
							"type": "string",
							"format": "uri",
							"enum": [
								"http://open-services.net/ns/core#"
							]
							},
							"skos": {
							"type": "string",
							"format": "uri",
							"enum": [
								"http://www.w3.org/2004/02/skos/core#"
							]
							},
							"rdfs:label": {
							"type": "object",
							"properties": {
								"@type": {
								"type": "string",
								"enum": [
									"xsd:string"
								]
								}
							}
							},
							"schema:isBasedOn": {
							"type": "object",
							"properties": {
								"@type": {
								"type": "string",
								"enum": [
									"@id"
								]
								}
							}
							},
							"schema:name": {
							"type": "object",
							"properties": {
								"@type": {
								"type": "string",
								"enum": [
									"xsd:string"
								]
								}
							}
							},
							"schema:description": {
							"type": "object",
							"properties": {
								"@type": {
								"type": "string",
								"enum": [
									"xsd:string"
								]
								}
							}
							},
							"pav:derivedFrom": {
							"type": "object",
							"properties": {
								"@type": {
								"type": "string",
								"enum": [
									"@id"
								]
								}
							}
							},
							"pav:createdOn": {
							"type": "object",
							"properties": {
								"@type": {
								"type": "string",
								"enum": [
									"xsd:dateTime"
								]
								}
							}
							},
							"pav:createdBy": {
							"type": "object",
							"properties": {
								"@type": {
								"type": "string",
								"enum": [
									"@id"
								]
								}
							}
							},
							"pav:lastUpdatedOn": {
							"type": "object",
							"properties": {
								"@type": {
								"type": "string",
								"enum": [
									"xsd:dateTime"
								]
								}
							}
							},
							"oslc:modifiedBy": {
							"type": "object",
							"properties": {
								"@type": {
								"type": "string",
								"enum": [
									"@id"
								]
								}
							}
							},
							"skos:notation": {
							"type": "object",
							"properties": {
								"@type": {
								"type": "string",
								"enum": [
									"xsd:string"
								]
								}
							}
							},
							"problem_definition": {
							"enum": [
								"https://schema.metadatacenter.org/properties/b9503e1b-f332-43ef-b2d8-7aceb651e65b"
							]
							},
							"benefit_harm": {
							"enum": [
								"https://schema.metadatacenter.org/properties/caf76e23-2773-4623-80cc-0991cdb3bec8"
							]
							},
							"alternative_framing": {
							"enum": [
								"https://schema.metadatacenter.org/properties/b2a81610-e5e9-4e21-9351-c8396521e6f9"
							]
							},
							"consult_stakeholders": {
							"enum": [
								"https://schema.metadatacenter.org/properties/b2db8450-ba8b-46d2-acbe-c746033bd6ff"
							]
							}
						},
						"required": [
							"xsd",
							"pav",
							"schema",
							"oslc",
							"schema:isBasedOn",
							"schema:name",
							"schema:description",
							"pav:createdOn",
							"pav:createdBy",
							"pav:lastUpdatedOn",
							"oslc:modifiedBy"
						],
						"additionalProperties": false
						},
						"@id": {
						"type": [
							"string",
							"null"
						],
						"format": "uri"
						},
						"@type": {
						"oneOf": [
							{
							"type": "string",
							"format": "uri"
							},
							{
							"type": "array",
							"minItems": 1,
							"items": {
								"type": "string",
								"format": "uri"
							},
							"uniqueItems": true
							}
						]
						},
						"schema:isBasedOn": {
						"type": "string",
						"format": "uri"
						},
						"schema:name": {
						"type": "string",
						"minLength": 1
						},
						"schema:description": {
						"type": "string"
						},
						"pav:derivedFrom": {
						"type": "string",
						"format": "uri"
						},
						"pav:createdOn": {
						"type": [
							"string",
							"null"
						],
						"format": "date-time"
						},
						"pav:createdBy": {
						"type": [
							"string",
							"null"
						],
						"format": "uri"
						},
						"pav:lastUpdatedOn": {
						"type": [
							"string",
							"null"
						],
						"format": "date-time"
						},
						"oslc:modifiedBy": {
						"type": [
							"string",
							"null"
						],
						"format": "uri"
						},
						"problem_definition": {
						"$schema": "http://json-schema.org/draft-04/schema#",
						"@id": "tmp-1747217452591-61489",
						"@type": "https://schema.metadatacenter.org/core/TemplateField",
						"@context": {
							"xsd": "http://www.w3.org/2001/XMLSchema#",
							"pav": "http://purl.org/pav/",
							"bibo": "http://purl.org/ontology/bibo/",
							"oslc": "http://open-services.net/ns/core#",
							"schema": "http://schema.org/",
							"skos": "http://www.w3.org/2004/02/skos/core#",
							"schema:name": {
							"@type": "xsd:string"
							},
							"schema:description": {
							"@type": "xsd:string"
							},
							"skos:prefLabel": {
							"@type": "xsd:string"
							},
							"skos:altLabel": {
							"@type": "xsd:string"
							},
							"pav:createdOn": {
							"@type": "xsd:dateTime"
							},
							"pav:createdBy": {
							"@type": "@id"
							},
							"pav:lastUpdatedOn": {
							"@type": "xsd:dateTime"
							},
							"oslc:modifiedBy": {
							"@type": "@id"
							}
						},
						"type": "object",
						"title": "problem_definition field schema",
						"description": "problem_definition field schema generated by the CEDAR Template Editor 2.7.1",
						"_ui": {
							"inputType": "radio"
						},
						"_valueConstraints": {
							"requiredValue": true,
							"multipleChoice": false,
							"literals": [
							{
								"label": "Yes"
							},
							{
								"label": "No"
							}
							]
						},
						"properties": {
							"@type": {
							"oneOf": [
								{
								"type": "string",
								"format": "uri"
								},
								{
								"type": "array",
								"minItems": 1,
								"items": {
									"type": "string",
									"format": "uri"
								},
								"uniqueItems": true
								}
							]
							},
							"@value": {
							"type": [
								"string",
								"null"
							]
							},
							"rdfs:label": {
							"type": [
								"string",
								"null"
							]
							}
						},
						"required": [
							"@value"
						],
						"schema:name": "problem_definition",
						"schema:description": "",
						"pav:createdOn": null,
						"pav:createdBy": null,
						"pav:lastUpdatedOn": null,
						"oslc:modifiedBy": null,
						"schema:schemaVersion": "1.6.0",
						"additionalProperties": false,
						"skos:prefLabel": "Have you clearly defined the problem and its purpose?"
						},
						"benefit_harm": {
						"$schema": "http://json-schema.org/draft-04/schema#",
						"@id": "tmp-1747217616288-225186",
						"@type": "https://schema.metadatacenter.org/core/TemplateField",
						"@context": {
							"xsd": "http://www.w3.org/2001/XMLSchema#",
							"pav": "http://purl.org/pav/",
							"bibo": "http://purl.org/ontology/bibo/",
							"oslc": "http://open-services.net/ns/core#",
							"schema": "http://schema.org/",
							"skos": "http://www.w3.org/2004/02/skos/core#",
							"schema:name": {
							"@type": "xsd:string"
							},
							"schema:description": {
							"@type": "xsd:string"
							},
							"skos:prefLabel": {
							"@type": "xsd:string"
							},
							"skos:altLabel": {
							"@type": "xsd:string"
							},
							"pav:createdOn": {
							"@type": "xsd:dateTime"
							},
							"pav:createdBy": {
							"@type": "@id"
							},
							"pav:lastUpdatedOn": {
							"@type": "xsd:dateTime"
							},
							"oslc:modifiedBy": {
							"@type": "@id"
							}
						},
						"type": "object",
						"title": "benefit_harm field schema",
						"description": "benefit_harm field schema generated by the CEDAR Template Editor 2.7.1",
						"_ui": {
							"inputType": "radio"
						},
						"_valueConstraints": {
							"requiredValue": true,
							"multipleChoice": false,
							"literals": [
							{
								"label": "Yes"
							},
							{
								"label": "No"
							}
							]
						},
						"properties": {
							"@type": {
							"oneOf": [
								{
								"type": "string",
								"format": "uri"
								},
								{
								"type": "array",
								"minItems": 1,
								"items": {
									"type": "string",
									"format": "uri"
								},
								"uniqueItems": true
								}
							]
							},
							"@value": {
							"type": [
								"string",
								"null"
							]
							},
							"rdfs:label": {
							"type": [
								"string",
								"null"
							]
							}
						},
						"required": [
							"@value"
						],
						"schema:name": "benefit_harm",
						"schema:description": "",
						"pav:createdOn": null,
						"pav:createdBy": null,
						"pav:lastUpdatedOn": null,
						"oslc:modifiedBy": null,
						"schema:schemaVersion": "1.6.0",
						"additionalProperties": false,
						"skos:prefLabel": "Have you identified who will benefit from this project - and who might be harmed?"
						},
						"alternative_framing": {
						"$schema": "http://json-schema.org/draft-04/schema#",
						"@id": "tmp-1747217763709-372607",
						"@type": "https://schema.metadatacenter.org/core/TemplateField",
						"@context": {
							"xsd": "http://www.w3.org/2001/XMLSchema#",
							"pav": "http://purl.org/pav/",
							"bibo": "http://purl.org/ontology/bibo/",
							"oslc": "http://open-services.net/ns/core#",
							"schema": "http://schema.org/",
							"skos": "http://www.w3.org/2004/02/skos/core#",
							"schema:name": {
							"@type": "xsd:string"
							},
							"schema:description": {
							"@type": "xsd:string"
							},
							"skos:prefLabel": {
							"@type": "xsd:string"
							},
							"skos:altLabel": {
							"@type": "xsd:string"
							},
							"pav:createdOn": {
							"@type": "xsd:dateTime"
							},
							"pav:createdBy": {
							"@type": "@id"
							},
							"pav:lastUpdatedOn": {
							"@type": "xsd:dateTime"
							},
							"oslc:modifiedBy": {
							"@type": "@id"
							}
						},
						"type": "object",
						"title": "alternative_framing field schema",
						"description": "alternative_framing field schema generated by the CEDAR Template Editor 2.7.1",
						"_ui": {
							"inputType": "radio"
						},
						"_valueConstraints": {
							"requiredValue": true,
							"multipleChoice": false,
							"literals": [
							{
								"label": "Yes"
							},
							{
								"label": "No"
							}
							]
						},
						"properties": {
							"@type": {
							"oneOf": [
								{
								"type": "string",
								"format": "uri"
								},
								{
								"type": "array",
								"minItems": 1,
								"items": {
									"type": "string",
									"format": "uri"
								},
								"uniqueItems": true
								}
							]
							},
							"@value": {
							"type": [
								"string",
								"null"
							]
							},
							"rdfs:label": {
							"type": [
								"string",
								"null"
							]
							}
						},
						"required": [
							"@value"
						],
						"schema:name": "alternative_framing",
						"schema:description": "Help Text",
						"pav:createdOn": null,
						"pav:createdBy": null,
						"pav:lastUpdatedOn": null,
						"oslc:modifiedBy": null,
						"schema:schemaVersion": "1.6.0",
						"additionalProperties": false,
						"skos:prefLabel": "Have you considered alternative ways to frame the problem?"
						},
						"consult_stakeholders": {
						"$schema": "http://json-schema.org/draft-04/schema#",
						"@id": "tmp-1747217837267-446166",
						"@type": "https://schema.metadatacenter.org/core/TemplateField",
						"@context": {
							"xsd": "http://www.w3.org/2001/XMLSchema#",
							"pav": "http://purl.org/pav/",
							"bibo": "http://purl.org/ontology/bibo/",
							"oslc": "http://open-services.net/ns/core#",
							"schema": "http://schema.org/",
							"skos": "http://www.w3.org/2004/02/skos/core#",
							"schema:name": {
							"@type": "xsd:string"
							},
							"schema:description": {
							"@type": "xsd:string"
							},
							"skos:prefLabel": {
							"@type": "xsd:string"
							},
							"skos:altLabel": {
							"@type": "xsd:string"
							},
							"pav:createdOn": {
							"@type": "xsd:dateTime"
							},
							"pav:createdBy": {
							"@type": "@id"
							},
							"pav:lastUpdatedOn": {
							"@type": "xsd:dateTime"
							},
							"oslc:modifiedBy": {
							"@type": "@id"
							}
						},
						"type": "object",
						"title": "consult_stakeholders field schema",
						"description": "consult_stakeholders field schema generated by the CEDAR Template Editor 2.7.1",
						"_ui": {
							"inputType": "radio"
						},
						"_valueConstraints": {
							"requiredValue": true,
							"multipleChoice": false,
							"literals": [
							{
								"label": "Yes"
							},
							{
								"label": "No"
							}
							]
						},
						"properties": {
							"@type": {
							"oneOf": [
								{
								"type": "string",
								"format": "uri"
								},
								{
								"type": "array",
								"minItems": 1,
								"items": {
									"type": "string",
									"format": "uri"
								},
								"uniqueItems": true
								}
							]
							},
							"@value": {
							"type": [
								"string",
								"null"
							]
							},
							"rdfs:label": {
							"type": [
								"string",
								"null"
							]
							}
						},
						"required": [
							"@value"
						],
						"schema:name": "consult_stakeholders",
						"schema:description": "",
						"pav:createdOn": null,
						"pav:createdBy": null,
						"pav:lastUpdatedOn": null,
						"oslc:modifiedBy": null,
						"schema:schemaVersion": "1.6.0",
						"additionalProperties": false,
						"skos:prefLabel": "Have you engaged or consulted stakeholders, specially those affected?"
						}
					},
					"required": [
						"@context",
						"@id",
						"schema:isBasedOn",
						"schema:name",
						"schema:description",
						"pav:createdOn",
						"pav:createdBy",
						"pav:lastUpdatedOn",
						"oslc:modifiedBy",
						"problem_definition",
						"benefit_harm",
						"alternative_framing",
						"consult_stakeholders"
					],
					"schema:name": "Boolean",
					"schema:description": "",
					"pav:createdOn": "2025-05-09T00:21:34-07:00",
					"pav:createdBy": "https://metadatacenter.org/users/d268159d-2c15-41cd-8a63-0f822fb56d26",
					"pav:lastUpdatedOn": "2025-05-09T00:39:36-07:00",
					"oslc:modifiedBy": "https://metadatacenter.org/users/d268159d-2c15-41cd-8a63-0f822fb56d26",
					"schema:schemaVersion": "1.6.0",
					"additionalProperties": false,
					"pav:version": "0.0.1",
					"bibo:status": "bibo:draft",
					"$schema": "http://json-schema.org/draft-04/schema#"
					}`,
			FormName: "Reflection",
		},
	}
	return db.Create(&questionnaires).Error
}

func (s QuestionnaireSeeder) Clear(db *gorm.DB) error {
	return db.Exec("DELETE FROM questionnaires").Error
}

// Questionnaire

type AnswerSeeder struct{}

func (s AnswerSeeder) Seed(db *gorm.DB) error {
	answers := []models.Answer{}
	return db.Create(&answers).Error
}

func (s AnswerSeeder) Clear(db *gorm.DB) error {
	return db.Exec("DELETE FROM answers").Error
}

// Recommendation

type RecommendationSeeder struct{}

func (s RecommendationSeeder) Seed(db *gorm.DB) error {
	recommendations := []models.Recommendation{
		{
			QuestionnaireID:  1,
			ToolID:           1,
			BinaryEvaluation: 0,
		},
		{
			QuestionnaireID:  1,
			ToolID:           2,
			BinaryEvaluation: 0,
		},
		{
			QuestionnaireID:  1,
			ToolID:           3,
			BinaryEvaluation: 0,
		},
		{
			QuestionnaireID:  1,
			ToolID:           4,
			BinaryEvaluation: 0,
		},
		{
			QuestionnaireID:  1,
			ToolID:           5,
			BinaryEvaluation: 0,
		},
		{
			QuestionnaireID:  1,
			ToolID:           1,
			BinaryEvaluation: 1,
		},
		{
			QuestionnaireID:  1,
			ToolID:           2,
			BinaryEvaluation: 2,
		},
		{
			QuestionnaireID:  1,
			ToolID:           3,
			BinaryEvaluation: 4,
		},
		{
			QuestionnaireID:  1,
			ToolID:           4,
			BinaryEvaluation: 8,
		},
		{
			QuestionnaireID:  1,
			ToolID:           1,
			BinaryEvaluation: 3,
		},
		{
			QuestionnaireID:  1,
			ToolID:           2,
			BinaryEvaluation: 3,
		},
		{
			QuestionnaireID:  1,
			ToolID:           3,
			BinaryEvaluation: 5,
		},
		{
			QuestionnaireID:  1,
			ToolID:           4,
			BinaryEvaluation: 5,
		},
		{
			QuestionnaireID:  1,
			ToolID:           1,
			BinaryEvaluation: 6,
		},
		{
			QuestionnaireID:  1,
			ToolID:           3,
			BinaryEvaluation: 6,
		},
		{
			QuestionnaireID:  1,
			ToolID:           1,
			BinaryEvaluation: 7,
		},
		{
			QuestionnaireID:  1,
			ToolID:           4,
			BinaryEvaluation: 9,
		},
		{
			QuestionnaireID:  1,
			ToolID:           3,
			BinaryEvaluation: 10,
		},
		{
			QuestionnaireID:  1,
			ToolID:           4,
			BinaryEvaluation: 10,
		},
		{
			QuestionnaireID:  1,
			ToolID:           5,
			BinaryEvaluation: 10,
		},
		{
			QuestionnaireID:  1,
			ToolID:           1,
			BinaryEvaluation: 11,
		},
		{
			QuestionnaireID:  1,
			ToolID:           3,
			BinaryEvaluation: 11,
		},
		{
			QuestionnaireID:  1,
			ToolID:           4,
			BinaryEvaluation: 11,
		},
		{
			QuestionnaireID:  1,
			ToolID:           2,
			BinaryEvaluation: 12,
		},
		{
			QuestionnaireID:  1,
			ToolID:           1,
			BinaryEvaluation: 13,
		},
		{
			QuestionnaireID:  1,
			ToolID:           5,
			BinaryEvaluation: 13,
		},
		{
			QuestionnaireID:  1,
			ToolID:           5,
			BinaryEvaluation: 15,
		},
	}
	return db.Create(&recommendations).Error
}

func (s RecommendationSeeder) Clear(db *gorm.DB) error {
	return db.Exec("DELETE FROM recommendations").Error
}
